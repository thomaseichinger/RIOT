*** stock_iot-lab_M3/openwsn/uart_ow.h	Thu Apr 24 11:01:37 2014
--- riot-openwsn-wip/openwsn/uart_ow.h	Thu Apr 24 16:55:54 2014
***************
*** 1,14 ****
  /**
  \brief Cross-platform declaration "uart" bsp module.
  
  \author Thomas Watteyne <watteyne@eecs.berkeley.edu>, February 2012.
  */
  
- #ifndef __UART_H
- #define __UART_H
- 
  #include "stdint.h"
! #include "board.h"
   
  //=========================== define ==========================================
  
--- 1,19 ----
+ #ifndef __UART_H
+ #define __UART_H
+ 
  /**
+ \addtogroup BSP
+ \{
+ \addtogroup uart
+ \{
+ 
  \brief Cross-platform declaration "uart" bsp module.
  
  \author Thomas Watteyne <watteyne@eecs.berkeley.edu>, February 2012.
  */
  
  #include "stdint.h"
! #include "board_ow.h"
   
  //=========================== define ==========================================
  
***************
*** 19,42 ****
     UART_EVENT_OVERFLOW,
  } uart_event_t;
  
! typedef void (*uart_tx_cbt)();
! typedef void (*uart_rx_cbt)();
  
  //=========================== variables =======================================
  
  //=========================== prototypes ======================================
  
! void    uart_init();
  void    uart_setCallbacks(uart_tx_cbt txCb, uart_rx_cbt rxCb);
! void    uart_enableInterrupts();
! void    uart_disableInterrupts();
! void    uart_clearRxInterrupts();
! void    uart_clearTxInterrupts();
  void    uart_writeByte(uint8_t byteToWrite);
! uint8_t uart_readByte();
  
  // interrupt handlers
! kick_scheduler_t uart_tx_isr();
! kick_scheduler_t uart_rx_isr();
  
! #endif
\ No newline at end of file
--- 24,52 ----
     UART_EVENT_OVERFLOW,
  } uart_event_t;
  
! typedef void (*uart_tx_cbt)(void);
! typedef void (*uart_rx_cbt)(void);
  
  //=========================== variables =======================================
  
  //=========================== prototypes ======================================
  
! void    uart_init_ow(void);
  void    uart_setCallbacks(uart_tx_cbt txCb, uart_rx_cbt rxCb);
! void    uart_enableInterrupts(void);
! void    uart_disableInterrupts(void);
! void    uart_clearRxInterrupts(void);
! void    uart_clearTxInterrupts(void);
  void    uart_writeByte(uint8_t byteToWrite);
! uint8_t uart_readByte_ow(void);
  
  // interrupt handlers
! kick_scheduler_t uart_tx_isr(void);
! kick_scheduler_t uart_rx_isr(void);
! 
! /**
! \}
! \}
! */
  
! #endif
