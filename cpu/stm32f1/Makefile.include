# this CPU implementation is using the new core/CPU interface
export CFLAGS += -DCOREIF_NG=1

# tell the build system that the CPU depends on the Cortex-M common files
export USEMODULE += cortex_m3_common

# define path to cortex-m common module, which is needed for this CPU
export CORTEX_M3_COMMON = $(RIOTCPU)/cortex_m3_common/

# define the linker script to use for this CPU
export LINKERSCRIPT = $(RIOTCPU)/$(CPU)/stm32f1_linkerscript.ld

# include CPU specific includes
INCLUDES += -I$(RIOTCPU)/$(CPU)/include/components
INCLUDES += -I$(RIOTBASE)/drivers/include/periph
INCLUDES += -I$(CORTEX_COMMON)/include
export INCLUDES += -I$(RIOTCPU)/$(CPU)/include

# explicitly tell the linker to link the syscalls and startup code.
#   Without this the interrupt vectors will not be linked correctly!
export UNDEF += $(BINDIR)cpu/syscalls.o
export UNDEF += $(BINDIR)cpu/startup.o

# export the peripheral drivers to be linked into the final binary
export USEMODULE += periph

# CPU depends on the cortex-m common module, so include it
include $(CORTEX_M3_COMMON)Makefile.include

#INCLUDES += -Iinclude
#INCLUDES += -I$(RIOTCPU)/$(CPU)/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/Include
#INCLUDES += -I$(RIOTCPU)/$(CPU)/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x
#INCLUDES += -I$(RIOTCPU)/$(CPU)/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc
#INCLUDES += -I$(RIOTBASE)/core/include -I$(RIOTBASE)/sys/include -I$(RIOTBASE)/sys/lib
