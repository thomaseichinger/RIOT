*** stock_iot-lab_M3/openwsn/radiotimer.h	Thu Apr 24 11:01:37 2014
--- riot-openwsn-wip/openwsn/radiotimer.h	Thu Apr 24 16:53:30 2014
***************
*** 1,20 ****
  /**
  \brief Cross-platform declaration "radiotimer" bsp module.
  
  \author Thomas Watteyne <watteyne@eecs.berkeley.edu>, February 2012.
  */
  
- #ifndef __RADIOTIMER_H
- #define __RADIOTIMER_H
- 
  #include "stdint.h"
! #include "board.h"
  
  //=========================== define ==========================================
  
  //=========================== typedef =========================================
  
! typedef void (*radiotimer_compare_cbt)();
  typedef void (*radiotimer_capture_cbt)(PORT_TIMER_WIDTH timestamp);
  
  //=========================== variables =======================================
--- 1,25 ----
+ #ifndef __RADIOTIMER_H
+ #define __RADIOTIMER_H
+ 
  /**
+ \addtogroup BSP
+ \{
+ \addtogroup radiotimer
+ \{
+ 
  \brief Cross-platform declaration "radiotimer" bsp module.
  
  \author Thomas Watteyne <watteyne@eecs.berkeley.edu>, February 2012.
  */
  
  #include "stdint.h"
! #include "board_ow.h"
  
  //=========================== define ==========================================
  
  //=========================== typedef =========================================
  
! typedef void (*radiotimer_compare_cbt)(void);
  typedef void (*radiotimer_capture_cbt)(PORT_TIMER_WIDTH timestamp);
  
  //=========================== variables =======================================
***************
*** 22,44 ****
  //=========================== prototypes ======================================
  
  // admin
! void     radiotimer_init();
  void     radiotimer_setOverflowCb(radiotimer_compare_cbt cb);
  void     radiotimer_setCompareCb(radiotimer_compare_cbt cb);
  void     radiotimer_setStartFrameCb(radiotimer_capture_cbt cb);
  void     radiotimer_setEndFrameCb(radiotimer_capture_cbt cb);
! void     radiotimer_start(PORT_TIMER_WIDTH period);
  // direct access
! PORT_TIMER_WIDTH radiotimer_getValue();
! void     radiotimer_setPeriod(PORT_TIMER_WIDTH period);
! PORT_TIMER_WIDTH radiotimer_getPeriod();
  // compare
! void     radiotimer_schedule(PORT_TIMER_WIDTH offset);
! void     radiotimer_cancel();
  // capture
! PORT_TIMER_WIDTH radiotimer_getCapturedTime();
  
  // interrupt handlers
! kick_scheduler_t   radiotimer_isr();
  
  #endif
--- 27,54 ----
  //=========================== prototypes ======================================
  
  // admin
! void     radiotimer_init(void);
  void     radiotimer_setOverflowCb(radiotimer_compare_cbt cb);
  void     radiotimer_setCompareCb(radiotimer_compare_cbt cb);
  void     radiotimer_setStartFrameCb(radiotimer_capture_cbt cb);
  void     radiotimer_setEndFrameCb(radiotimer_capture_cbt cb);
! void     radiotimer_start(PORT_RADIOTIMER_WIDTH period);
  // direct access
! PORT_RADIOTIMER_WIDTH radiotimer_getValue(void);
! void     radiotimer_setPeriod(PORT_RADIOTIMER_WIDTH period);
! PORT_RADIOTIMER_WIDTH radiotimer_getPeriod(void);
  // compare
! void     radiotimer_schedule(PORT_RADIOTIMER_WIDTH offset);
! void     radiotimer_cancel(void);
  // capture
! PORT_RADIOTIMER_WIDTH radiotimer_getCapturedTime(void);
  
  // interrupt handlers
! kick_scheduler_t   radiotimer_isr(void);
! 
! /**
! \}
! \}
! */
  
  #endif
