From 64cdb0c4c9a854e19707b7dbdfa235a5942c35c9 Mon Sep 17 00:00:00 2001
From: Thomas Eichinger <thomas.eichinger1@gmail.com>
Date: Thu, 9 Jul 2015 17:15:04 +0200
Subject: [PATCH 6/8] fixes

---
 drivers/common/openserial.c                   | 18 +++++------
 openapps/Makefile                             |  8 +++--
 openapps/rrt/rrt.c                            |  2 +-
 openapps/uinject/uinject.c                    |  6 ++--
 openstack/02a-MAClow/IEEE802154E.c            |  4 +--
 openstack/02b-MAChigh/schedule.c              |  8 ++---
 openstack/04-TRAN/Makefile                    |  4 ++-
 projects/common/03oos_openwsn/03oos_openwsn.c | 45 ++++++++++++++++++++-------
 projects/common/03oos_openwsn/03oos_openwsn.h |  4 +--
 9 files changed, 63 insertions(+), 36 deletions(-)

diff --git a/drivers/common/openserial.c b/drivers/common/openserial.c
index 9c9ff04..2523f8f 100644
--- a/drivers/common/openserial.c
+++ b/drivers/common/openserial.c
@@ -1,4 +1,4 @@
-/**
+/**
 \brief Definition of the "openserial" driver.

 \author Fabien Chraim <chraim@eecs.berkeley.edu>, March 2012.
@@ -721,11 +721,11 @@ void isr_openserial_rx(void) {
    //keep lenght
    inputBufFill=openserial_vars.inputBufFill;

-   if        (
-                openserial_vars.busyReceiving==FALSE  &&
-                openserial_vars.lastRxByte==HDLC_FLAG &&
-                rxbyte!=HDLC_FLAG
-              ) {
+   // if        (
+   //             openserial_vars.busyReceiving==FALSE  &&
+   //             openserial_vars.lastRxByte==HDLC_FLAG &&
+   //             rxbyte!=HDLC_FLAG
+   //           ) {
       // start of frame
    //    // I'm now receiving
    //    openserial_vars.busyReceiving         = TRUE;
@@ -779,14 +779,14 @@ void isr_openserial_rx(void) {
 //======== SERIAL ECHO =============

 void openserial_echo(uint8_t* buf, uint8_t bufLen){
-   // INTERRUPT_DECLARATION();
+   INTERRUPT_DECLARATION();
    // // echo back what you received
    // openserial_printData(
    //    buf,
    //    bufLen
    // );

-   //  DISABLE_INTERRUPTS();
+   DISABLE_INTERRUPTS();
    //  openserial_vars.inputBufFill = 0;
-   //  ENABLE_INTERRUPTS();
+   ENABLE_INTERRUPTS();
 }
diff --git a/openapps/Makefile b/openapps/Makefile
index 57aa5c8..8804176 100644
--- a/openapps/Makefile
+++ b/openapps/Makefile
@@ -6,7 +6,9 @@ DIRS += $(CURDIR)/c6t \
         $(CURDIR)/cinfo \
         $(CURDIR)/cleds \
         $(CURDIR)/cstorm \
-        $(CURDIR)/cwellknown
+        $(CURDIR)/cwellknown \
+        $(CURDIR)/rrt \
+        $(CURDIR)/uinject

 INCLUDES += -I$(CURDIR)/c6t \
			-I$(CURDIR)/techo \
@@ -15,6 +17,8 @@ INCLUDES += -I$(CURDIR)/c6t \
			-I$(CURDIR)/cleds \
			-I$(CURDIR)/cstorm \
			-I$(CURDIR)/cwellknown \
+			-I$(CURDIR)/rrt \
+			-I$(CURDIR)/uinject \
			-I$(OPENWSN_ROOT)/openstack/04-TRAN \
			-I$(OPENWSN_ROOT)/drivers/common \
			-I$(OPENWSN_ROOT)/openstack/02a-MAClow \
@@ -23,4 +27,4 @@ INCLUDES += -I$(CURDIR)/c6t \
			-I$(OPENWSN_ROOT)/openstack/03b-IPv6 \
			-I$(OPENWSN_ROOT)/openstack/cross-layers

-include $(RIOTBASE)/Makefile.base
\ No newline at end of file
+include $(RIOTBASE)/Makefile.base
diff --git a/openapps/rrt/rrt.c b/openapps/rrt/rrt.c
index bbbc174..e28bbb9 100644
--- a/openapps/rrt/rrt.c
+++ b/openapps/rrt/rrt.c
@@ -44,7 +44,7 @@ void rrt_sendCoAPMsg(char actionMsg, uint8_t *ipv6mote);
 /**
 \brief Initialize this module.
 */
-void rrt_init() {
+void rrt_init(void) {

    // do not run if DAGroot
    if(idmanager_getIsDAGroot()==TRUE) return;
diff --git a/openapps/uinject/uinject.c b/openapps/uinject/uinject.c
index 00cde29..510aaf5 100644
--- a/openapps/uinject/uinject.c
+++ b/openapps/uinject/uinject.c
@@ -25,7 +25,7 @@ void uinject_task_cb(void);

 //=========================== public ==========================================

-void uinject_init() {
+void uinject_init(void) {

    // clear local variables
    memset(&uinject_vars,0,sizeof(uinject_vars_t));
@@ -65,7 +65,7 @@ void uinject_timer_cb(opentimer_id_t id){
    scheduler_push_task(uinject_task_cb,TASKPRIO_COAP);
 }

-void uinject_task_cb() {
+void uinject_task_cb(void) {
    OpenQueueEntry_t*    pkt;

    // don't run if not synch
@@ -105,4 +105,4 @@ void uinject_task_cb() {
    if ((openudp_send(pkt))==E_FAIL) {
       openqueue_freePacketBuffer(pkt);
    }
-}
\ No newline at end of file
+}
diff --git a/openstack/02a-MAClow/IEEE802154E.c b/openstack/02a-MAClow/IEEE802154E.c
index 45d2379..00a1cf4 100644
--- a/openstack/02a-MAClow/IEEE802154E.c
+++ b/openstack/02a-MAClow/IEEE802154E.c
@@ -1789,7 +1789,7 @@ port_INLINE void ieee154e_getAsn(uint8_t* array) {
    array[4]         =  ieee154e_vars.asn.byte4;
 }

-port_INLINE uint16_t ieee154e_getTimeCorrection() {
+port_INLINE uint16_t ieee154e_getTimeCorrection(void) {
     int16_t returnVal;

     returnVal = (uint16_t)(ieee154e_vars.timeCorrection);
@@ -1847,7 +1847,7 @@ port_INLINE void asnStoreFromEB(uint8_t* asn) {
    ieee154e_vars.asn.byte4        =     asn[4];
 }

-port_INLINE void ieee154e_syncSlotOffset() {
+port_INLINE void ieee154e_syncSlotOffset(void) {
    frameLength_t frameLength;
    uint32_t slotOffset;

diff --git a/openstack/02b-MAChigh/schedule.c b/openstack/02b-MAChigh/schedule.c
index 8d20095..599c599 100644
--- a/openstack/02b-MAChigh/schedule.c
+++ b/openstack/02b-MAChigh/schedule.c
@@ -252,7 +252,7 @@ void  schedule_getSlotInfo(

 \param[out] maximum number of active slots
 */
-uint16_t  schedule_getMaxActiveSlots() {
+uint16_t  schedule_getMaxActiveSlots(void) {
    return schedule_vars.maxActiveSlots;
 }

@@ -451,7 +451,7 @@ bool schedule_isSlotOffsetAvailable(uint16_t slotOffset){
    return TRUE;
 }

-scheduleEntry_t* schedule_statistic_poorLinkQuality(){
+scheduleEntry_t* schedule_statistic_poorLinkQuality(void) {
    scheduleEntry_t* scheduleWalker;

    INTERRUPT_DECLARATION();
@@ -543,7 +543,7 @@ frameLength_t schedule_getFrameLength(void) {

 \returns The frame handle.
 */
-uint8_t schedule_getFrameHandle() {
+uint8_t schedule_getFrameHandle(void) {
    uint8_t returnVal;

    INTERRUPT_DECLARATION();
@@ -561,7 +561,7 @@ uint8_t schedule_getFrameHandle() {

 \returns The frame number.
 */
-uint8_t schedule_getFrameNumber() {
+uint8_t schedule_getFrameNumber(void) {
    uint8_t returnVal;

    INTERRUPT_DECLARATION();
diff --git a/openstack/04-TRAN/Makefile b/openstack/04-TRAN/Makefile
index e8c21c9..42aef37 100644
--- a/openstack/04-TRAN/Makefile
+++ b/openstack/04-TRAN/Makefile
@@ -1,6 +1,8 @@
 #MODULE = openwsn

 INCLUDES += -I$(OPENWSN_ROOT)/openapps/techo \
-			-I$(OPENWSN_ROOT)/openapps/uecho
+			-I$(OPENWSN_ROOT)/openapps/uecho \
+			-I$(OPENWSN_ROOT)/openapps/rrt \
+			-I$(OPENWSN_ROOT)/openapps/uinject

 include $(RIOTBASE)/Makefile.base
diff --git a/projects/common/03oos_openwsn/03oos_openwsn.c b/projects/common/03oos_openwsn/03oos_openwsn.c
index ba1a779..5314113 100644
--- a/projects/common/03oos_openwsn/03oos_openwsn.c
+++ b/projects/common/03oos_openwsn/03oos_openwsn.c
@@ -17,17 +17,38 @@
 #define ENABLE_DEBUG (0)
 #include "debug.h"

-static char openwsn_stack[KERNEL_CONF_STACKSIZE_MAIN];
-int openwsn_pid = -1;
+static char openwsn_stack[THREAD_STACKSIZE_DEFAULT];
+kernel_pid_t openwsn_pid = -1;
+uint8_t owsn_mop;

 void openwsn_init(void);
 void* openwsn_start(void *arg);

-void openwsn_start_thread(void) {
+int openwsn_start_thread(int argc, char** argv) {
     DEBUG("%s\n",__PRETTY_FUNCTION__);
-    openwsn_pid = thread_create(openwsn_stack, KERNEL_CONF_STACKSIZE_MAIN,
-                                PRIORITY_OPENWSN-2, CREATE_STACKTEST,
-                                openwsn_start, NULL, "openwsn thread");
+    if (argc < 2) {
+        printf("usage: %s (r|n)\n", argv[0]);
+        puts("\tr\tinitialise as DAGROOT.");
+        puts("\tn\tinitialise as node.");
+        return -1;
+    }
+
+    char command = argv[1][0];
+    if (command == 'r') {
+        printf("Starting OpenWSN as root ... ");
+        owsn_mop = 1;
+        openwsn_pid = thread_create(openwsn_stack, THREAD_STACKSIZE_DEFAULT,
+                                    PRIORITY_OPENWSN, CREATE_STACKTEST,
+                                    openwsn_start, (void*)&owsn_mop, "openwsn thread");
+    }
+    else {
+        printf("Starting OpenWSN as node ... ");
+        owsn_mop = 0;
+        openwsn_pid = thread_create(openwsn_stack, THREAD_STACKSIZE_DEFAULT,
+                                    PRIORITY_OPENWSN, CREATE_STACKTEST,
+                                    openwsn_start, (void*)&owsn_mop, "openwsn thread");
+    }
+    return 0;
 }

 void* openwsn_start(void *arg) {
@@ -36,7 +57,7 @@ void* openwsn_start(void *arg) {
     leds_all_off();
     board_init_ow();
     scheduler_init();
-    openstack_init();
+    openstack_init(*((uint8_t*)arg));
     puts("OpenWSN thread started.");
     scheduler_start();
     return NULL;
@@ -45,14 +66,14 @@ void* openwsn_start(void *arg) {
 int mote_main(void) {

    // initialize
-   board_init();
-   CRYPTO_ENGINE.init();
-   scheduler_init();
-   openstack_init();
+   // board_init();
+   // CRYPTO_ENGINE.init();
+   // scheduler_init();
+   // openstack_init();

    // indicate

    // start
-   scheduler_start();
+   // scheduler_start();
    return 0; // this line should never be reached
 }
diff --git a/projects/common/03oos_openwsn/03oos_openwsn.h b/projects/common/03oos_openwsn/03oos_openwsn.h
index 8125096..b79bb2a 100644
--- a/projects/common/03oos_openwsn/03oos_openwsn.h
+++ b/projects/common/03oos_openwsn/03oos_openwsn.h
@@ -7,10 +7,10 @@
 #ifndef __openwsn_H
 #define __openwsn_H

-void openwsn_start_thread(int argc, char **argv);
+int openwsn_start_thread(int argc, char **argv);

 //=========================== define ==========================================

-#define PRIORITY_OPENWSN            PRIORITY_MAIN-1
+#define PRIORITY_OPENWSN            THREAD_PRIORITY_MAIN-1

 #endif
--
2.4.5
